- content_for :scripts
  javascript:
    window.activityCategory = "srs";

div#sentence-quiz-app.study-card
  div.sentence-question
    div style="position: absolute; top: 0; left: 0"
      label
        input type="checkbox" v-model="formVars.fresh"
        ' &#x1f530;
      br style="margin-bottom: 1em;"
      a.ajax-link @click="updateSentence" &#x1f504;
      br style="margin-bottom: 1em;"
        a.ajax-link v-if="selectedWord" @click="openModal" &#x1f50e;
    div.center-block
      div.sentence-word-container v-for="(word, wordIndex) of sentence"
        div v-if="word.answer" @click="selectWord(wordIndex)"
          div.sentence-word-tooltip :class="'answer-' + word.answer" = '{{word.answer}}'
          div.sentence-word.word-question-answered = "{{word.text}}"
        div v-else-if="word.seq"
          div.sentence-word-tooltip ?
          div.sentence-word class="word-question" @click="selectWord(wordIndex)" = "{{word.text}}"
        div.sentence-word v-else="true" = "{{word.text}}"

  div v-if="selectedWord"
    div.answer-buttons v-if="selectedSentenceWord.answer"
      div.answer-button.yellow @click="resetAnswer" = 'Answered: {{selectedSentenceWord.answer}}; RESET'
    div.answer-buttons v-else="true"
      div.answer-button.red @click="answer('incorrect')"
        ' NO
        div.answer-details = '+ 3 + {{selectedKreb.progress.incorrect}}'
      div.answer-button.blue @click="answer('soso')"
        ' SO&#8209;SO
        div.answer-details = '+ {{selectedKreb.progress.soso}}'
      div.answer-button.green @click="answer('correct')"
        ' YES
        div.answer-details = '+ {{selectedKreb.progress.correct}}'
    vue-word :seq="selectedWord.seq" :j="j" :editing="editing" @search="search"

  div v-if="allAnswered && !selectedWord && !f.submitted"
    div.answer-buttons v-if="allAnswered"
      div.answer-button.blue @click="submit" SUBMIT
    div.center-block style="margin-top: 1em;" v-if="english" = 'Translation: {{english}}'

javascript:
  var app = new Vue({
    el: '#sentence-quiz-app',
    data: {
      sentenceId: null,
      sentence: [],
      english: null,
      j: {},
      f: {selectedWordSentenceIndex: null, submitted: false},
      editing: #{{options('editing')}},
      formVars: {
        drillId: #{{params[:drill_id] || 'null'}},
        fresh: true,
        learningType: #{{params[:type].present? ? "\"#{params[:type]}\"" : 'null'}}
      },
      is_drill: #{{params[:drill_id].present?}},
    },
    computed: {
      questionPath() {
        return "/api/question?" +
            (this.formVars.drillId ? `&drill_id=${this.formVars.drillId}` : '') +
            (this.formVars.learningType ? `&type=${this.formVars.learningType}` : '') +
            (this.formVars.fresh ? '&fresh=true' : '');
      },
      allAnswered() {
        var unanswered = this.sentence.filter(i => i.seq && !i.answer);
        return unanswered.length === 0 && this.sentence.length !== 0 ? true : false;
      },
      selectedKreb() {
        if (!this.selectedWord) return null;

        // sentence[].seq is a string (not a number)
        var wordBase = this.sentence.find(i => i.seq == this.selectedWord.seq).base;
        return this.selectedWord.krebs.find(i => i.title === wordBase);
      },
      selectedSentenceWord() {
        return this.f.selectedWordSentenceIndex !== null ?
               this.sentence[this.f.selectedWordSentenceIndex] :
               null;
      },
      selectedWord() {
        // selectedSentenceWord.seq is a string, that's why comparison is '=='
        return this.selectedSentenceWord !== null ?
               this.j.words.find(i => i.seq == this.selectedSentenceWord.seq) :
               null;
      },
    },
    methods: {
      selectWord(sentenceIndex) {
        var seq = this.sentence[sentenceIndex].seq;
        if (this.selectedWord && seq == this.selectedWord.seq) {
          // deselect selected word
          this.f.selectedWordSentenceIndex = null;
        } else {
          // sentence[].seq is a string (not a number); that's why '==' is used
          this.f.selectedWordSentenceIndex = sentenceIndex;
        }
      },
      answer(answerText) {
        this.sentence[this.f.selectedWordSentenceIndex].answer = answerText;
        this.f.selectedWordSentenceIndex = null;
      },
      resetAnswer() {
        this.sentence[this.f.selectedWordSentenceIndex].answer = null;
      },
      submit() {
        var app = this;
        app.f.submitted = true;
        var answers = app.sentence.filter(i => i.seq).map(function(i){
          return {seq: i.seq, base: i.base, answer: i.answer}
        });

        $.ajax({
          url: "#{{path_to(:study2)}}",
          method: 'POST',
          data: Object.assign(
                {sentence_id: app.sentenceId, answers: answers},
                this.formVars.drillId ? {drill_id: this.formVars.drillId} : null,
                this.formVars.learningType ? {type: this.formVars.learningType} : null,
          )
        }).done(data => {
          if (data == 'ok') {
            app.updateSentence();
          } else {
            alert('error');
          }
        });
      },
      updateSentence() {
        var app = this;
        $.ajax({
          url: this.questionPath,
          method: 'GET'
        }).done(data => {
          var j = JSON.parse(data);
          app.j = j.j;
          app.english = j.english;
          app.sentenceId = j.sentence_id;
          app.sentence = j.sentence.map(function(i){
            if (i.seq) {
              var k = app.findKreb(i.seq, i.base);
              i.answer = null;
              if (k && k.progress.burned_at) {
                i.answer = 'burned';
              } else if (k.progress.reviewed_at) {
                var reviewedAt = new Date(k.progress.reviewed_at);
                if (reviewedAt.toDateString() == (new Date()).toDateString() &&
                        this.sentenceId) {
                  i.answer = k.progress.last_answer;
                }
              }
            }
            return i;
          });

          app.f.selectedWordSentenceIndex = null;
          app.f.submitted = false;
        });
      },
      findKreb(seq, title) {
        var word = this.j.words.find(i => i.seq == seq);
        return (word ? word.krebs.find(i => i.title == title) : null);
      },
      openModal() {
        window.vueModal.openSearch(this.selectedSentenceWord.text);
      },
      search(query) {
        window.vueModal.openSearch(query)
      },
    }, // end of methods
    mounted: function(){
      this.updateSentence();
      const app = this;
      document.onkeydown = function(e) {
        const a = document.activeElement;
        if (a.tagName === "TEXTAREA" || (a.tagName === "INPUT" && a.type === "text"))
          return true;
        if (app.selectedWord) {
          if (e.key === "y") {
            app.answer('correct');
          } else if (e.key === "n") {
            app.answer('incorrect');
          } else if (e.key === "s") {
            app.answer('soso');
          }
        } else {
          if (e.keyCode === 32) {
            e.preventDefault(); // disable unwanted scrolling on 'space'
            app.allAnswered ? app.submit() : app.selectWord(0);
          }
        }
      }

    }
  });
