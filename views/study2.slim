ruby:
  question_path = params[:drill_id] ? path_to(:api_question_drill) + "?id=#{params[:drill_id]}" : path_to(:api_sentence)

div#sentence-quiz-app.study-card
  div.sentence-question
    div style="position: absolute; top: 0; left: 0"
      input type="button" @click="updateSentence" value="Next"
    div.center-block
      div.sentence-word-container v-for="(word, wordIndex) of sentence"
        div v-if="word.answer" @click="selectWord(wordIndex)"
          div.sentence-word-tooltip :class="'answer-' + word.answer" = '{{word.answer}}'
          div.sentence-word.word-question-answered = "{{word.text}}"
        div v-else-if="word.seq"
          div.sentence-word-tooltip ?
          div.sentence-word class="word-question" @click="selectWord(wordIndex)" = "{{word.text}}"
        div.sentence-word v-else="true" = "{{word.text}}"

  div v-if="selectedWord"
    div.answer-buttons v-if="selectedSentenceWord.answer"
      div.answer-button.yellow @click="resetAnswer" = 'Answered: {{selectedSentenceWord.answer}}; RESET'
    div.answer-buttons v-else="true"
      div.answer-button.red @click="answer('incorrect')"
        ' NO
        div.answer-details = '+ 3 + {{selectedKreb.progress.incorrect}}'
      div.answer-button.blue @click="answer('soso')"
        ' SO&#8209;SO
        div.answer-details = '+ {{selectedKreb.progress.soso}}'
      div.answer-button.green @click="answer('correct')"
        ' YES
        div.answer-details = '+ {{selectedKreb.progress.correct}}'
    vue-word :seq="selectedWord.seq" :j="j" :editing="editing"

  div v-if="allAnswered && !selectedWord && !f.submitted"
    div.answer-buttons v-if="allAnswered"
      div.answer-button.blue @click="submit" SUBMIT
    div.center-block style="margin-top: 1em;" v-if="english" = 'Translation: {{english}}'

javascript:
  var app = new Vue({
    el: '#sentence-quiz-app',
    data: {
      sentence: [],
      english: null,
      j: {},
      f: {selectedWordSentenceIndex: null, submitted: false},
      editing: #{{user_settings('editing')}}
    },
    computed: {
      allAnswered() {
        var unanswered = this.sentence.filter(i => i.seq && !i.answer);
        return unanswered.length === 0 && this.sentence.length !== 0 ? true : false;
      },
      selectedKreb() {
        if (!this.selectedWord) return null;

        // sentence[].seq is a string (not a number)
        var wordBase = this.sentence.find(i => i.seq == this.selectedWord.seq).base;
        return this.selectedWord.krebs.find(i => i.title === wordBase);
      },
      selectedSentenceWord() {
        return this.f.selectedWordSentenceIndex !== null ?
               this.sentence[this.f.selectedWordSentenceIndex] :
               null;
      },
      selectedWord() {
        // selectedSentenceWord.seq is a string, that's why comparison is '=='
        return this.selectedSentenceWord !== null ?
               this.j.words.find(i => i.seq == this.selectedSentenceWord.seq) :
               null;
      },
    },
    methods: {
      selectWord(sentenceIndex) {
        var seq = this.sentence[sentenceIndex].seq;
        if (this.selectedWord && seq == this.selectedWord.seq) {
          // deselect selected word
          this.f.selectedWordSentenceIndex = null;
        } else {
          // sentence[].seq is a string (not a number); that's why '==' is used
          this.f.selectedWordSentenceIndex = sentenceIndex;
        }
      },
      answer(answerText) {
        this.sentence[this.f.selectedWordSentenceIndex].answer = answerText;
        this.f.selectedWordSentenceIndex = null;
      },
      resetAnswer() {
        this.sentence[this.f.selectedWordSentenceIndex].answer = null;
      },
      submit() {
        var app = this;
        app.f.submitted = true;
        var answers = app.sentence.filter(i => i.seq).map(function(i){
          return {seq: i.seq, base: i.base, answer: i.answer}
        });

        $.ajax({
          url: "#{{path_to(:study2)}}",
          method: 'POST',
          data: {answers: answers}
        }).done(data => {
          if (data == 'ok') {
            app.updateSentence();
          } else {
            alert('error');
          }
        });
      },
      updateSentence() {
        var app = this;
        $.ajax({
          url: "#{{question_path}}",
          method: 'GET'
        }).done(data => {
          var j = JSON.parse(data);
          app.j = j.j;
          app.english = j.english;
          app.sentence = j.sentence.map(function(i){
            if (i.seq) {
              var k = app.findKreb(i.seq, i.base);
              i.answer = k && k.progress.burned_at ? 'burned' : null;
            }
            return i;
          });

          app.f.selectedWordSentenceIndex = null;
          app.f.submitted = false;
        });
      },
      findKreb(seq, title) {
        var word = this.j.words.find(i => i.seq == seq);
        return (word ? word.krebs.find(i => i.title == title) : null);
      }
    }, // end of methods
    mounted: function(){
      this.updateSentence();
    }
  });
