script src="/js/jquery-ui.min.js"
div.word-card

  div.word-krebs
    - [*@word.kele, *@word.rele].each do |ele|
      div.word-kreb
        div.word-kreb-title = ele['keb'] || ele['reb']
        - if ele['pri']
          div.word-tags
          - ele['pri'].each do |k,v|
            span.word-tag = "#{k}:#{v}"

  - if @word.card_id.present?
    div.word-tags
      span.word-tag: a href=path_to(:card).with(@word.card_id) = "wk:#{@word.card.level}"

  - bullets = %w(① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿) # white circled numbers

  div
    span style="font-size: x-large" &#x1f1ec;&#x1f1e7;
    - if @word.en.length > 1
      - @word.en.each_with_index do |m2,i|
        = " #{bullets[i]} "
        = m2['gloss'].join(', ')
    - elsif @word.en.length == 1
      = ' ' + @word.en[0]['gloss'].join(', ')

  - if @word.ru
    div
      span style="font-size: x-large" &#x1f1f7;&#x1f1fa;
      - if @word.ru.length > 1
        - @word.ru.each_with_index do |m2,i|
          = " #{bullets[i]} "
          = m2['gloss'].join(', ')
      - elsif @word.ru.length == 1
        = ' ' + @word.ru[0]['gloss'].join(', ')

  table.connected-words-table
    tr
      th Contains:
      th Contained in:
    tr
      td: div class="connected-word" v-for="(sw, swIndex) of shortWords"
        a> :href="sw.href" {{sw.title}}
        span.action-buttons
          | [
          a @click="deleteConnectedWord('short', swIndex)" 消す
          | ]
      td: div class="connected-word" v-for="(sw, swIndex) of longWords"
        a> :href="sw.href" {{sw.title}}
        span.action-buttons
          | [
          a @click="deleteConnectedWord('long', swIndex)" 消す
          | ]
    tr
      td: input class="word-connection-autocomplete" type="text" data-word-type="short"
      td: input class="word-connection-autocomplete" type="text" data-word-type="long"
    
  h2 Sentences

  div style="background: #f7f2d2; padding: 0.4em 0.6em; text-align: justify;"
    span v-for="(s, sIndex) of sentences"
      | {{bullets[sIndex]}} {{s.jp}}
      span< style="font-size: small" 《{{s.en}}》
      span.action-buttons
        | [
        a.remove-sentence-button @click="removeSentence(sIndex, false)" 消す
        | ] 

  div style="padding: 0.4em 0.6em; text-align: justify;"
    span v-for="(s, sIndex) of rawSentences"
      | {{bullets[sIndex]}} {{s.jp}}
      span< style="font-size: small" 《{{s.en}}》
      span.action-buttons
        | [
        a.remove-sentence-button @click="removeSentence(sIndex, true)" 消す
        | ] 

div style="background-color: #f7f2d2"
  == slim :sentence_form

javascript:
  $(function(){
    $('.word-connection-autocomplete').autocomplete({
      source: "#{{path_to(:autocomplete_word)}}",
      minLength: 1,
      select: function(event,ui) {
        var wordType = $(this).data('word-type');
        var postData = {};
        postData[wordType] = ui.item.id;
        postData[wordType === 'short' ? 'long' : 'short'] = #{{@word.seq}};

        $.ajax({
          url: "#{{path_to(:word_connect)}}",
          method: 'POST',
          data: postData
        }).done(data => {
          app.addConnectedWord(wordType, {seq: ui.item.id, title: ui.item.title, href: ui.item.href});
          $(this).val('');
        });

        return false;
      }
    });
  });

  var app = new Vue({
    el: '.word-card',
    data: {
      bullets: #{{bullets.to_json}},
      shortWords: #{{@word.short_words.map{|i| {seq: i.seq, title: i.krebs[0], href: path_to(:word).with(i.seq)}}.to_json }},
      longWords: #{{@word.long_words.map{|i| {seq: i.seq, title: i.krebs[0], href: path_to(:word).with(i.seq)}}.to_json }},
      rawSentences: #{{@sentences.map{|i| {jp: i.japanese, en: i.english, href: path_to(:sentence).with(i.id)}}.to_json}},
      sentences: #{{@word.sentences.map{|i| {jp: i.japanese, en: i.english, href: path_to(:sentence).with(i.id)}}.to_json}}
    },
    methods: {
      addConnectedWord(wordType, word) {
        if (wordType === 'short') {
          this.shortWords.push(word);
        } else {
          this.longWords.push(word);
        }
      },
      deleteConnectedWord(wordType, wordIndex) {
        var word = wordType === 'short' ? this.shortWords[wordIndex] : this.longWords[wordIndex];
        var postData = {};
        postData[wordType] = word.seq;
        postData[wordType === 'short' ? 'long' : 'short'] = #{{@word.seq}};

        var ask = confirm(`Are you sure you want to delete ${word.title}?`);
        if (ask) {
          $.ajax({
            url: "#{{path_to(:word_connect)}}",
            method: "DELETE",
            data: postData
          }).done(data => {
            if (wordType === 'short') {
              this.shortWords = this.shortWords.filter(i => i.seq != word.seq);
            } else {
              this.longWords = this.longWords.filter(i => i.seq != word.seq);
            }
          });
        }
      },
      removeSentence(idx, isRawSentence) {
        var ask = confirm("Are you sure?");
        var sentenceUrl = isRawSentence ? this.rawSentences[idx].href : this.sentences[idx].href;
        if (ask) {
          $.ajax({
            url: sentenceUrl,
            method: "DELETE"
          }).done(data => {
            if (isRawSentence) {
              this.rawSentences = this.rawSentences.filter(i => i.href != sentenceUrl);
            } else {
              this.sentences = this.sentences.filter(i => i.href != sentenceUrl);
            }
          });
        };
      }
    }
  });
