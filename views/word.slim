script src="/js/jquery-ui.min.js"
div.word-card#word-card-app

  div.word-krebs
    span v-for="(kreb, krebIndex) of krebs"
      div.word-kreb :class="kreb.classes" @click="openKrebForm(krebIndex)" = "{{kreb.title}}"
      span v-if="krebIndex === forms.kreb" class="word-kreb-form"
        span v-if="kreb.progress"
          = "{{kreb.progress.learned_at ? 'learned ' : ''}}"
          span v-if="kreb.progress.burned_at" burned
          span v-else="true"
            a @click="burnWord(kreb.progress.id)" burn!
        span v-else="true"
          a @click="learnWord(kreb)" learn!

  - bullets = %w(① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿) # white circled numbers

  - [{glosses: @word.en, flag: "&#x1f1ec;&#x1f1e7;"}, {glosses: @word.ru, flag: "&#x1f1f7;&#x1f1fa;"}].each do |lang|
    - next unless lang[:glosses]
    div.word-glosses
      div.word-gloss-flag == lang[:flag]
      - if lang[:glosses].length > 1
        - lang[:glosses].each_with_index do |m2,i|
          = "#{bullets[i]} "
          - if m2['pos'].present?
            span> class="word-gloss-pos" = m2['pos'].map{|i| i[1..-2]}.join(', ')
          = m2['gloss'].join(', ') + ' '
      - elsif lang[:glosses].length == 1
        = lang[:glosses][0]['gloss'].join(', ')

  - if @word.cards.length > 0
    div.word-glosses
      div.word-gloss-flag &#x1f980;
      - @word.cards.sort{|a,b| a.level <=> b.level}.each do |card|
        a> href=path_to(:card).with(card.id) = "#{card.title} (#{card.level})"

  div.word-comment-form
    div v-if="forms.comment"
      textarea id="word-comment-textarea" v-model="comment" @keyup.esc="hideCommentForm"
      input type="button" value="Save" @click="saveComment"
    div.editable-text v-else-if="comment" @click="showCommentForm"
      p v-for="commentLine of comment.split('\n')" = '{{commentLine}}'
    div.editable-text v-else="true" style="font-style: italic; color: rgba(128,128,128,0.7)" @click="showCommentForm" Add comment

  div style="margin: 0.8em 0;"
    span> style="font-weight: bold" Contains:
    div class="connected-word" v-for="(sw, swIndex) of shortWords"
      a> :href="sw.href" {{sw.title}}
      span.action-buttons
        | [
        a @click="deleteConnectedWord('short', swIndex)" 消す
        | ]
    div class="connected-word-none" v-if="!shortWords.length" none
    input<> class="word-connection-autocomplete" type="text" data-word-type="short" placeholder="Add short"

    span> style="font-weight: bold" Belongs to:
    div class="connected-word" v-for="(sw, swIndex) of longWords"
      a> :href="sw.href" {{sw.title}}
      span.action-buttons
        | [
        a @click="deleteConnectedWord('long', swIndex)" 消す
        | ]
    div class="connected-word-none" v-if="!longWords.length" none
    input class="word-connection-autocomplete" type="text" data-word-type="long" placeholder="Add long"

  div style="opacity: 0.5; font-size: 0.6em; text-align: justify" &#x2139;&#xfe0f; Add only those words, which doesn't form new senses or readings when connected. GOOD examples: 電子＋書籍、図書館＋員. BAD examples: 料理＋人 (reading of 人 can be tricky; we should memorize full word 料理人), 一＋週間 (same here for 一; you may want mark this as 'burned' right away if you wish), 食料＋品 (new sense formed: food + articles = groceries; also, reading of 品 can be ひん or ぴん; you can mark 食料 as 'burned' if you want to reduce count of reviewing words)

  div.hr-title: span style="margin: 1em 0" Sentences

  div.word-sentences.word-sentences-structured
    span v-for="(s, sIndex) of sentences"
      | {{bullets[sIndex]}} {{s.jp}}
      span< style="font-size: small" 《{{s.en}}》
      span.action-buttons
        | [
        a.remove-sentence-button @click="removeSentence(sIndex, false)" 消す
        | ] 

  div.word-sentences
    span v-for="(s, sIndex) of rawSentences"
      | {{bullets[sIndex]}} {{s.jp}}
      span< style="font-size: small" 《{{s.en}}》
      span.action-buttons
        | [
        a.remove-sentence-button @click="removeSentence(sIndex, true)" 消す
        | ] 

div style="text-align: center; background: #f7f2d2;"
  == slim :sentence_form
br

javascript:
  $(function(){
    $('.word-connection-autocomplete').autocomplete({
      source: "#{{path_to(:autocomplete_word)}}",
      minLength: 1,
      select: function(event,ui) {
        var wordType = $(this).data('word-type');
        var postData = {};
        postData[wordType] = ui.item.id;
        postData[wordType === 'short' ? 'long' : 'short'] = #{{@word.seq}};

        $.ajax({
          url: "#{{path_to(:word_connect)}}",
          method: 'POST',
          data: postData
        }).done(data => {
          wordApp.addConnectedWord(wordType, {seq: ui.item.id, title: ui.item.title, href: ui.item.href});
          $(this).val('');
        });

        return false;
      }
    });
  });

  var wordApp = new Vue({
    el: '#word-card-app',
    data: {
      forms: {comment: false, kreb: null},
      bullets: #{{bullets.to_json}},
      word: #{{@word.to_json}},
      wordTitles: #{{@word.word_titles.to_json}},
      progresses: #{{@word.user_progresses ? Hash[*@word.user_progresses.map{|i| [i.title, i]}.flatten].to_json : '{}'}},
      shortWords: #{{@word.short_words.map{|i| {seq: i.seq, title: i.krebs[0], href: path_to(:word).with(i.seq)}}.to_json }},
      longWords: #{{@word.long_words.map{|i| {seq: i.seq, title: i.krebs[0], href: path_to(:word).with(i.seq)}}.to_json }},
      rawSentences: #{{@sentences.map{|i| {jp: i.japanese, en: i.english, href: path_to(:sentence).with(i.id)}}.to_json}},
      sentences: #{{@word.all_sentences.map{|i| {jp: i.japanese, en: i.english, href: path_to(:sentence).with(i.id)}}.to_json}},
      comment: "#{{@word_details.try(:comment).try(:gsub, /"/, '\"').try(:gsub, /\n/, '\\n') || ""}}"
    },
    computed: {
      krebs: function() {
        var krebs = [];
        for (kreb of this.wordTitles) {
          var kreb = Object.create(kreb);
          kreb.classes = [];

          if (kreb.is_common) kreb.classes.push('word-kreb-common');
          if (this.progresses[kreb.title]) kreb.progress = this.progresses[kreb.title];

          if (kreb.progress && kreb.progress.unlocked_at) {
            kreb.wkLevel = function(){
              if (!kreb.progress.learned_at) return 'unlocked';
              if (kreb.progress.deck <= 1)   return 'apprentice';
              if (kreb.progress.deck == 2)   return 'guru';
              if (kreb.progress.deck == 3)   return 'master';
              if (kreb.progress.deck >= 4 && kreb.progress.deck <= 5) return 'enlightened';
              if (kreb.progress.deck >= 6)   return 'burned';
            }();
          } else {
            kreb.wkLevel = 'locked';
          }
          kreb.classes.push(kreb.wkLevel);

          krebs.push(kreb);
        }
        return krebs;
      }
    },
    methods: {
      addConnectedWord(wordType, word) {
        if (wordType === 'short') {
          this.shortWords.push(word);
        } else {
          this.longWords.push(word);
        }
      },
      deleteConnectedWord(wordType, wordIndex) {
        var word = wordType === 'short' ? this.shortWords[wordIndex] : this.longWords[wordIndex];
        var postData = {};
        postData[wordType] = word.seq;
        postData[wordType === 'short' ? 'long' : 'short'] = #{{@word.seq}};

        var ask = confirm(`Are you sure you want to delete ${word.title}?`);
        if (ask) {
          $.ajax({
            url: "#{{path_to(:word_connect)}}",
            method: "DELETE",
            data: postData
          }).done(data => {
            if (wordType === 'short') {
              this.shortWords = this.shortWords.filter(i => i.seq != word.seq);
            } else {
              this.longWords = this.longWords.filter(i => i.seq != word.seq);
            }
          });
        }
      },
      removeSentence(idx, isRawSentence) {
        var ask = confirm("Are you sure?");
        var sentenceUrl = isRawSentence ? this.rawSentences[idx].href : this.sentences[idx].href;
        if (ask) {
          $.ajax({
            url: sentenceUrl,
            method: "DELETE"
          }).done(data => {
            if (isRawSentence) {
              this.rawSentences = this.rawSentences.filter(i => i.href != sentenceUrl);
            } else {
              this.sentences = this.sentences.filter(i => i.href != sentenceUrl);
            }
          });
        };
      },
      learnWord(kreb) {
        $.ajax({
          url: "#{{path_to(:word_learn)}}",
          method: "POST",
          data: {seq: this.word.seq, kreb: kreb.title}
        }).done(data => {
          var newProgress = JSON.parse(data);
          var _progresses = Object.assign({}, this.progresses);
          _progresses[newProgress.title] = newProgress;
          this.progresses = _progresses;
        });
      },
      burnWord(progressId) {
        $.ajax({
          url: "#{{path_to(:word_burn)}}",
          method: "POST",
          data: {progress_id: progressId}
        }).done(data => {
          var progress = JSON.parse(data);
          this.progresses[progress.title].burned_at = progress.burned_at;
        });
      },
      saveComment() {
        $.ajax({
          url: "#{{path_to(:word_set_comment).with(@word.seq)}}",
          data: {comment: this.comment},
          method: "POST"
        }).done(data => {
          this.forms.comment = false;
        });
      },
      showCommentForm() {
        this.forms.comment = true;
      },
      hideCommentForm() {
        this.forms.comment = false;
      },
      openKrebForm(krebIndex) {
        if (this.forms.kreb === krebIndex) {
          this.forms.kreb = null;
        } else {
          this.forms.kreb = krebIndex;
        }
      }
    }
  });
