div#search-app
  div.browse-panel
    input type="text" placeholder="Search..." @input="searchDebounce" v-model="searchQuery" @keydown.down="nextResult()" @keydown.up="previousResult()" @keydown.esc="clearInputField()"
    div.search-results
      div v-for="(result, resultIndex) in searchResults" :id="'search-result-' + resultIndex" class="result" :class="[result[2] ? 'common' : 'uncommon', selectedWord == result[0] ? 'selected' : null, highlightedWordIndex === resultIndex ? 'highlighted' : null]" @click="openWord(resultIndex)"
        = "{{result[1]}}"
        div v-if="result[3]" class="learned-icon"
  div.contents-panel
    vue-word v-if="wordData" :seq="selectedWord" :j="wordData" :editing="true"

javascript:
  var app = new Vue({
    el: '#search-app',
    data: {
      searchQuery: '',
      previousQuery: '',
      searchResults: [],
      selectedWord: null,
      highlightedWordIndex: null,
      wordData: null
    },
    computed: {
    },
    methods: {
      searchDebounce: debounce(function(){this.search();}, 250),
      search() {
        var app = this;
        var query = this.searchQuery;

        // Prevent request while composing japanese text sing IME
        // Otherwise, same (unchanged) request will be sent after each key press
        if (this.searchQuery === this.previousQuery) return;

        $.ajax({
          url: "#{{path_to(:search2)}}",
          method: 'POST',
          data: {query: query}
        }).done(data => {
          // If input field hasn't been changed while we're trying to get results
          if (query === app.searchQuery) {
            app.highlightedWordIndex = null;
            var j = JSON.parse(data);
            app.searchResults = j;
            app.previousQuery = query;
          }
        });
      },
      openWord(index) {
        var app = this;
        var seq = this.searchResults[index][0];
        this.highlightedWordIndex = index;
        this.selectedWord = seq;
        this.wordData = null;
        $.ajax({
          url: "#{{path_to(:word_details)}}",
          method: 'GET',
          data: {seq: seq}
        }).done(data => {
          if (seq === app.selectedWord) {
            var j = JSON.parse(data);
            app.wordData = j;
          }
        });
      },
      openWordDebounced: debounce(function(){
        this.openWord(this.highlightedWordIndex);
      }, 250),
      nextResult() {
        if (this.searchResults.length === 0) return;

        if (this.highlightedWordIndex === null) {
          this.highlightedWordIndex = 0;
        } else {
          this.highlightedWordIndex += 1;
        }

        if (this.highlightedWordIndex === this.searchResults.length) {
          this.highlightedWordIndex = 0;
        }

        this.openWordDebounced();
      },
      previousResult() {
        if (this.searchResults.length === 0) return;

        if (this.highlightedWordIndex === null) {
          this.highlightedWordIndex = this.searchResults.length - 1;
        } else {
          this.highlightedWordIndex -= 1;
        }

        if (this.highlightedWordIndex === -1) {
          this.highlightedWordIndex = this.searchResults.length - 1;
        }

        this.openWordDebounced();
      },
      clearInputField() {
        this.searchQuery = '';
        this.previousQuery = '';
      },
    }, // end of methods
  });

  document.onclick = function(){
    var f = document.activeElement;
    if (f.nodeName === "TEXTAREA" || (f.nodeName === "INPUT" && f.type === "text")) {
      return;
    } else if (window.getSelection().toString() === '') {
      $('#search-app .browse-panel input').focus()
    }
  };

  function debounce(func, wait, immediate) {
    var timeout;
    return function() {
      var context = this,
        args = arguments;
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(function() {
        timeout = null;
        if (!immediate) {
          func.apply(context, args);
        }
      }, wait);
      if (callNow) func.apply(context, args);
    }
  }
