ruby:
  groups = {
        just_unlocked: {title: 'Unlocked', color: :green},
        just_learned: {title: 'New', color: :blue},
        failed: {title: 'Failed', color: :red},
        expired: {title: 'Expired', color: :yellow}}
  tt = {r: :radicals, k: :kanjis, w: :words}

table.study-links-table
  tr
    td
    td Radicals
    td Kanji
    td Words
  - groups.each do |gk,gv|
    tr
      td = gv[:title]
      - %w(r k w).each do |k|
        - i = @counters[gk][k] || 0
        td
          - if i > 0
            - study_path = (gk == :just_unlocked ? path_to(:random_unlocked).with(tt[k.to_sym]) : path_to(:study).with(tt[k.to_sym], gk) )
            a class="study-button #{gv[:color]}" href=study_path = i
          - else
            ' -
ruby:
  day_cards = {}
  (Date.today..(Date.today + 14)).each {|d| day_cards[d] = {r: 0, k: 0, w: 0, total: 0}}
  cc = Card.where(Card.arel_table[:scheduled].lteq(Date.today + 14)).group(:scheduled, :element_type).count
  cc.each do |daytype,c|
    d = daytype[0] < Date.today ? Date.today : daytype[0]
    day_cards[d][daytype[1].to_sym] += c
    day_cards[d][:total] += c
  end

  _height = 70
  _width = 22
  _gap = 2

  maxval = 1 # cannot be less than 1
  graph_width = _width * 14
  half_bar_width = _width/2.0 - _gap/2.0
  iter = 0
  day_cards.each do |k,v|
    maxval = v[:total] if v[:total] > maxval
  end

svg.upcoming-week-graph height=_height+30 width=graph_width
  - day_cards.each do |k,v|
    - bar_height = _height*v[:total]/maxval.to_f
    g transform=("translate(#{iter*_width},10)")
      - height_shift = 0
      - [:w, :k, :r].each do |s|
        - part_height = _height*v[s]/maxval.to_f
        rect class="bar #{s.to_s}" x=0 y=_height-bar_height+height_shift width=half_bar_width*2 height=part_height
        - height_shift += part_height
      text x=half_bar_width y=_height+12 = k.strftime("%a")
      text x=half_bar_width y=_height-bar_height-2 = v[:total]
    - iter += 1
